/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ic7cc.ovchinnikov.lab2;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import ic7cc.ovchinnikov.lab2.model.*;

import java.io.IOException;
import java.nio.file.Paths;

public class App {

    public static void main(String[] args) throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        mapper.enable(SerializationFeature.INDENT_OUTPUT);
        mapper.writeValue(Paths.get("test_grammar/grammar_without_left_factoring_1.json").toFile(), testLeftfactoring());
        mapper.writeValue(Paths.get("test_grammar/grammar_with_meeting_several_terminals_1.json").toFile(), testRemoveMeetingSeveralTerminals());
        mapper.writeValue(Paths.get("test_grammar/grammar_with_unreachable_non_terminal_1.json").toFile(), testRemoveUnreachableNonTerminal());
        mapper.writeValue(Paths.get("test_grammar/grammar_with_useless_non_terminal_1.json").toFile(), testRemoveUselessCharacter());
        mapper.writeValue(Paths.get("test_grammar/grammar_with_chain_rules_1.json").toFile(), testRemoveChainRules());
        mapper.writeValue(Paths.get("test_grammar/grammar_non_normal_form_chomsky_1.json").toFile(), testConversionToChomskyNormalForm1());
        mapper.writeValue(Paths.get("test_grammar/grammar_non_normal_form_chomsky_2.json").toFile(), testConversionToChomskyNormalForm2());
        mapper.writeValue(Paths.get("test_grammar/grammar_with_long_rules_1.json").toFile(), testRemovingLongRules());
        mapper.writeValue(Paths.get("test_grammar/g0.json").toFile(), G0());
        mapper.writeValue(Paths.get("test_grammar/s0.json").toFile(), S0());


    }

    public static Grammar testLeftfactoring1() {
        Grammar grammar = new Grammar("TEST", "S");
        Terminal terminalA = new Terminal("a", "a");
        Terminal terminalB = new Terminal("b", "b");
        Terminal terminalC = new Terminal("c", "c");
        Terminal terminalD = new Terminal("d", "d");
        NonTerminal nonTerminalS = new NonTerminal("S");
        NonTerminal nonTerminalA = new NonTerminal("A");
        NonTerminal nonTerminalC = new NonTerminal("C");
        NonTerminal nonTerminalD = new NonTerminal("D");
        grammar.addTerminals(terminalA, terminalB, terminalD);
        grammar.addNonTerminals(nonTerminalS, nonTerminalC, nonTerminalD);

        grammar.addProduction(grammar.getStartSymbol(), Symbol.of(terminalA), Symbol.of(terminalB), Symbol.of(terminalC));
        grammar.addProduction(grammar.getStartSymbol(), Symbol.of(terminalA), Symbol.of(terminalB), Symbol.of(terminalC), Symbol.of(terminalC), Symbol.of(nonTerminalA));
        grammar.addProduction(grammar.getStartSymbol(), Symbol.of(terminalA), Symbol.of(terminalB), Symbol.of(nonTerminalA));
        grammar.addProduction(grammar.getStartSymbol(), Symbol.of(terminalA), Symbol.of(terminalB), Symbol.of(terminalB), Symbol.of(nonTerminalA));
        grammar.addProduction(grammar.getStartSymbol(), Symbol.of(terminalB), Symbol.of(terminalA), Symbol.of(nonTerminalA));
        grammar.addProduction(nonTerminalA, Symbol.of(terminalC), Symbol.of(terminalB));
        grammar.addProduction(nonTerminalA, Symbol.of(terminalC), Symbol.of(terminalB), Symbol.of(terminalA), Symbol.of(terminalC));
        grammar.addProduction(nonTerminalA, Symbol.of(terminalC), Symbol.of(terminalC));

        return grammar;
    }
    public static Grammar testLeftfactoring() {
        Grammar grammar = new Grammar("G0", "A");
        Terminal terminalA = new Terminal("a", "a");
        Terminal terminalB = new Terminal("b", "b");
        Terminal terminalD = new Terminal("d", "d");
        NonTerminal nonTerminalC = new NonTerminal("C");
        NonTerminal nonTerminalD = new NonTerminal("D");
        grammar.addTerminals(terminalA, terminalB, terminalD);
        grammar.addNonTerminals(nonTerminalC, nonTerminalD);

        grammar.addProduction(grammar.getStartSymbol(), Symbol.of(terminalA), Symbol.of(terminalB), Symbol.of(nonTerminalC), Symbol.of(nonTerminalD));
        grammar.addProduction(grammar.getStartSymbol(), Symbol.of(terminalA), Symbol.of(terminalB), Symbol.of(nonTerminalD));
        grammar.addProduction(grammar.getStartSymbol(), Symbol.of(terminalA), Symbol.of(terminalB), Symbol.of(terminalD), Symbol.of(nonTerminalC));
        grammar.addProduction(grammar.getStartSymbol(), Symbol.of(terminalA), Symbol.of(terminalD));
        grammar.addProduction(grammar.getStartSymbol(), Symbol.of(terminalA));

        return grammar;
    }
    public static Grammar testRemoveMeetingSeveralTerminals() {
        Grammar grammar = new Grammar("Remove Meeting Several Terminals", "A");
        NonTerminal nonTerminalA = grammar.getStartSymbol();
        NonTerminal nonTerminalB = new NonTerminal("B");
        NonTerminal nonTerminalC = new NonTerminal("C");

        Terminal terminalA = new Terminal("a", "a");
        Terminal terminalB = new Terminal("b", "b");
        Terminal terminalC = new Terminal("c", "c");
        Terminal terminalD = new Terminal("d", "d");
        grammar.addNonTerminals(nonTerminalA, nonTerminalB, nonTerminalC);
        grammar.addTerminals(terminalA, terminalB, terminalC, terminalD);
        grammar.addProduction(nonTerminalA, Symbol.of(terminalA), Symbol.of(nonTerminalB));
        grammar.addProduction(nonTerminalA, Symbol.of(terminalA), Symbol.of(terminalA));
        grammar.addProduction(nonTerminalB, Symbol.of(terminalB), Symbol.of(nonTerminalC));
        grammar.addProduction(nonTerminalC, Symbol.of(terminalC), Symbol.of(terminalD));

        return grammar;
    }
    public static Grammar testRemoveUnreachableNonTerminal() {
        Grammar grammar = new Grammar("Remove Unreachable Non Terminal","S");
        NonTerminal nonTerminalS = grammar.getStartSymbol();
        NonTerminal nonTerminalA = new NonTerminal("A");
        NonTerminal nonTerminalB = new NonTerminal("B");
        NonTerminal nonTerminalC = new NonTerminal("C");
        NonTerminal nonTerminalD = new NonTerminal("D");
        NonTerminal nonTerminalE = new NonTerminal("E");
        NonTerminal nonTerminalF = new NonTerminal("F");
        NonTerminal nonTerminalG = new NonTerminal("G");

        Terminal terminalC = new Terminal("c", "c");
        grammar.addTerminals(terminalC);
        grammar.addNonTerminals(nonTerminalS, nonTerminalA, nonTerminalB, nonTerminalC, nonTerminalD, nonTerminalE, nonTerminalF, nonTerminalG);
        grammar.addProduction(nonTerminalS, Symbol.of(nonTerminalA), Symbol.of(nonTerminalB));
        grammar.addProduction(nonTerminalS, Symbol.of(nonTerminalC), Symbol.of(nonTerminalD));
        grammar.addProduction(nonTerminalA, Symbol.of(nonTerminalE), Symbol.of(nonTerminalF));
        grammar.addProduction(nonTerminalG, Symbol.of(nonTerminalA), Symbol.of(nonTerminalD));
        grammar.addProduction(nonTerminalC, Symbol.of(terminalC));

        return grammar;
    }
    public static Grammar testRemoveUselessCharacter() {
        Grammar grammar = new Grammar("Remove Useless Character", "S");
        NonTerminal nonTerminalS = grammar.getStartSymbol();
        NonTerminal nonTerminalA = new NonTerminal("A");
        NonTerminal nonTerminalD = new NonTerminal("D");

        Terminal terminalA = new Terminal("a", "a");
        Terminal terminalC = new Terminal("c", "c");

        grammar.addTerminals(terminalA, terminalC);
        grammar.addNonTerminals(nonTerminalS, nonTerminalA, nonTerminalD);
        grammar.addProduction(nonTerminalS, Symbol.of(nonTerminalA), Symbol.of(terminalC));
        grammar.addProduction(nonTerminalA, Symbol.of(nonTerminalS), Symbol.of(nonTerminalD));
        grammar.addProduction(nonTerminalD, Symbol.of(terminalA), Symbol.of(nonTerminalD));
        grammar.addProduction(nonTerminalA, Symbol.of(terminalA));

        return grammar;
    }
    public static Grammar testRemoveChainRules() {
        Grammar grammar = new Grammar("Remove Chain Rules", "A");
        NonTerminal nonTerminalA = grammar.getStartSymbol();
        NonTerminal nonTerminalB = new NonTerminal("B");
        NonTerminal nonTerminalC = new NonTerminal("C");
        NonTerminal nonTerminalD = new NonTerminal("D");

        Terminal terminalA = new Terminal("a", "a");
        Terminal terminalB = new Terminal("b", "b");
        Terminal terminalC = new Terminal("c", "c");

        grammar.addNonTerminals(nonTerminalA, nonTerminalB, nonTerminalC, nonTerminalD);
        grammar.addTerminals(terminalA, terminalB, terminalC);
        grammar.addProduction(nonTerminalA, Symbol.of(nonTerminalB));
        grammar.addProduction(nonTerminalA, Symbol.of(terminalA));
        grammar.addProduction(nonTerminalB, Symbol.of(nonTerminalC));
        grammar.addProduction(nonTerminalB, Symbol.of(terminalB));
        grammar.addProduction(nonTerminalC, Symbol.of(nonTerminalD), Symbol.of(nonTerminalD));
        grammar.addProduction(nonTerminalC, Symbol.of(terminalC));

        return grammar;
    }
    public static Grammar testConversionToChomskyNormalForm1() {
        Grammar grammar = new Grammar("Test Chomsky", "S");
        NonTerminal nonTerminalS = grammar.getStartSymbol();
        NonTerminal nonTerminalA = new NonTerminal("A");
        NonTerminal nonTerminalB = new NonTerminal("B");

        Terminal terminalA = new Terminal("a", "a");
        Terminal terminalB = new Terminal("b", "b");

        grammar.addTerminals(terminalA, terminalB);
        grammar.addNonTerminals(nonTerminalS, nonTerminalA, nonTerminalB);
        grammar.addProduction(nonTerminalS, Symbol.of(terminalA), Symbol.of(nonTerminalA), Symbol.of(nonTerminalB));
        grammar.addProduction(nonTerminalS, Symbol.of(nonTerminalB), Symbol.of(nonTerminalA));
        grammar.addProduction(nonTerminalA, Symbol.of(nonTerminalB), Symbol.of(nonTerminalB), Symbol.of(nonTerminalB));
        grammar.addProduction(nonTerminalA, Symbol.of(terminalA));
        grammar.addProduction(nonTerminalB, Symbol.of(nonTerminalA), Symbol.of(nonTerminalS));
        grammar.addProduction(nonTerminalB, Symbol.of(terminalB));

        return grammar;
    }
    public static Grammar testConversionToChomskyNormalForm2() {
        Grammar grammar = new Grammar("Test Chomsky", "S");
        NonTerminal nonTerminalS = grammar.getStartSymbol();
        NonTerminal nonTerminalU = new NonTerminal("U");

        Terminal terminalA = new Terminal("a", "a");
        Terminal terminalB = new Terminal("b", "b");

        grammar.addTerminals(terminalA, terminalB);
        grammar.addNonTerminals(nonTerminalS, nonTerminalU);
        grammar.addProduction(nonTerminalS, Symbol.EPSILON);
        grammar.addProduction(nonTerminalS, Symbol.of(terminalA), Symbol.of(nonTerminalU), Symbol.of(terminalB), Symbol.of(nonTerminalU));
        grammar.addProduction(nonTerminalU, Symbol.of(nonTerminalS));
        grammar.addProduction(nonTerminalU, Symbol.of(terminalB), Symbol.of(terminalA));

        return grammar;
    }
    public static Grammar testRemovingLongRules() {
        Grammar grammar = new Grammar("Test Removing Long Rules","S");
        NonTerminal nonTerminalS = grammar.getStartSymbol();
        NonTerminal nonTerminalA = new NonTerminal("A");
        NonTerminal nonTerminalB = new NonTerminal("B");

        Terminal terminalA = new Terminal("a", "a");
        Terminal terminalC = new Terminal("c", "c");
        Terminal terminalD = new Terminal("d", "d");
        Terminal terminalE = new Terminal("e", "e");
        Terminal terminalF = new Terminal("f", "f");

        grammar.addNonTerminals(nonTerminalS, nonTerminalA, nonTerminalB);
        grammar.addTerminals(terminalA, terminalC, terminalD, terminalE, terminalF);
        grammar.addProduction(nonTerminalS, Symbol.of(nonTerminalA), Symbol.of(nonTerminalB));
        grammar.addProduction(nonTerminalA, Symbol.of(terminalA), Symbol.of(nonTerminalB), Symbol.of(terminalC), Symbol.of(nonTerminalB));
        grammar.addProduction(nonTerminalB, Symbol.of(terminalD), Symbol.of(terminalE), Symbol.of(terminalF));

        return grammar;
    }
    public static Grammar G0() {
        Grammar grammar = new Grammar("G0", "E");
        Terminal ident = new Terminal("IDENT", "a");
        Terminal add = new Terminal("ADD", "+");
        Terminal mul = new Terminal("MUL", "*");
        Terminal lparen = new Terminal("LPAREN", "(");
        Terminal rparen = new Terminal("RPAREN", ")");

        NonTerminal nonTerminalE = grammar.getStartSymbol();
        NonTerminal nonTerminalT = new NonTerminal("T");
        NonTerminal nonTerminalF = new NonTerminal("F");

        grammar.addTerminals(ident, add, mul, lparen, rparen);
        grammar.addNonTerminals(nonTerminalT, nonTerminalF);
        grammar.addProduction(nonTerminalE, Symbol.of(nonTerminalE), Symbol.of(add), Symbol.of(nonTerminalT));
        grammar.addProduction(nonTerminalE, Symbol.of(nonTerminalT));
        grammar.addProduction(nonTerminalT, Symbol.of(nonTerminalT), Symbol.of(mul), Symbol.of(nonTerminalF));
        grammar.addProduction(nonTerminalT, Symbol.of(nonTerminalF));
        grammar.addProduction(nonTerminalF, Symbol.of(ident));
        grammar.addProduction(nonTerminalF, Symbol.of(lparen), Symbol.of(nonTerminalE), Symbol.of(rparen));

        return grammar;
    }
    public static Grammar S0() {
        Grammar grammar = new Grammar("S0", "S");
        NonTerminal nonTerminalS = grammar.getStartSymbol();
        NonTerminal nonTerminalA = new NonTerminal("A");

        Terminal terminalA = new Terminal("a", "a");
        Terminal terminalB = new Terminal("b", "b");
        Terminal terminalC = new Terminal("c", "c");
        Terminal terminalD = new Terminal("d", "d");

        grammar.addTerminals(terminalA, terminalB, terminalC, terminalD);
        grammar.addNonTerminals(nonTerminalA);
        grammar.addProduction(nonTerminalS, Symbol.of(nonTerminalA), Symbol.of(terminalA));
        grammar.addProduction(nonTerminalS, Symbol.of(terminalB));
        grammar.addProduction(nonTerminalA, Symbol.of(nonTerminalA), Symbol.of(terminalC));
        grammar.addProduction(nonTerminalA, Symbol.of(nonTerminalS), Symbol.of(terminalD));
        grammar.addProduction(nonTerminalA, Symbol.EPSILON);

        return grammar;
    }
}
