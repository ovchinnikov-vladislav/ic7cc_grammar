/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ic7cc.ovchinnikov.lab2;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import ic7cc.ovchinnikov.lab2.model.*;
import ic7cc.ovchinnikov.lab2.optimization.Optimization;

import java.io.IOException;
import java.nio.file.Paths;

public class App {

    public static void main(String[] args) throws IOException {
        //Grammar newGrammar = Optimization.conversionToChomskyNormalForm(testConversionToChomskyNormalForm());
       // Grammar newGrammar = Optimization.leftRecursionElimination(S0());
        Grammar newGrammar = Optimization.removeLongRules(testRemovingLongRules());
        ObjectMapper mapper = new ObjectMapper();
        mapper.enable(SerializationFeature.INDENT_OUTPUT);
        mapper.writeValue(Paths.get("grammar/test_removing_long_rules.json").toFile(), newGrammar);
    }

    public static Grammar testConversionToChomskyNormalForm() {
        NonTerminal nonTerminalS = new NonTerminal("S");
        NonTerminal nonTerminalU = new NonTerminal("U");

        Terminal eps = Terminal.EPSILON;
        Terminal terminalA = new Terminal("a", "a");
        Terminal terminalB = new Terminal("b", "b");

        Grammar grammar = new Grammar("Test Chomsky", nonTerminalS);
        grammar.addTerminals(terminalA, terminalB, eps);
        grammar.addNonTerminals(nonTerminalS, nonTerminalU);
        grammar.addProduction(nonTerminalS, eps);
        grammar.addProduction(nonTerminalS, terminalA, nonTerminalU, terminalB, nonTerminalU);
        grammar.addProduction(nonTerminalU, nonTerminalS);
        grammar.addProduction(nonTerminalU, terminalB, terminalA);

        return grammar;
    }

    public static Grammar testRemovingLongRules() {
        NonTerminal nonTerminalS = new NonTerminal("S");
        NonTerminal nonTerminalA = new NonTerminal("A");
        NonTerminal nonTerminalB = new NonTerminal("B");

        Terminal terminalA = new Terminal("a", "a");
        Terminal terminalC = new Terminal("c", "c");
        Terminal terminalD = new Terminal("d", "d");
        Terminal terminalE = new Terminal("e", "e");
        Terminal terminalF = new Terminal("f", "f");

        Grammar grammar = new Grammar("Test Removing Long Rules", nonTerminalS);
        grammar.addNonTerminals(nonTerminalS, nonTerminalA, nonTerminalB);
        grammar.addTerminals(terminalA, terminalC, terminalD, terminalE, terminalF);
        grammar.addProduction(nonTerminalS, nonTerminalA, nonTerminalB);
        grammar.addProduction(nonTerminalA, terminalA, nonTerminalB, terminalC, nonTerminalB);
        grammar.addProduction(nonTerminalB, terminalD, terminalE, terminalF);

        return grammar;
    }

    public static Grammar G0() {
        Terminal ident = new Terminal("IDENT", "a");
        Terminal add = new Terminal("ADD", "+");
        Terminal mul = new Terminal("MUL", "*");
        Terminal lparen = new Terminal("LPAREN", "(");
        Terminal rparen = new Terminal("RPAREN", ")");

        NonTerminal nonTerminalE = new NonTerminal("E");
        NonTerminal nonTerminalT = new NonTerminal("T");
        NonTerminal nonTerminalF = new NonTerminal("F");

        Grammar grammar = new Grammar("G0", nonTerminalE);
        grammar.addTerminals(ident, add, mul, lparen, rparen);
        grammar.addNonTerminals(nonTerminalE, nonTerminalT, nonTerminalF);
        grammar.addProduction(nonTerminalE, nonTerminalE, add, nonTerminalT);
        grammar.addProduction(nonTerminalE, nonTerminalT);
        grammar.addProduction(nonTerminalT, nonTerminalT, mul, nonTerminalF);
        grammar.addProduction(nonTerminalT, nonTerminalF);
        grammar.addProduction(nonTerminalF, ident);
        grammar.addProduction(nonTerminalF, lparen, nonTerminalE, rparen);

        return grammar;
    }

    public static Grammar S0() {
        NonTerminal nonTerminalS = new NonTerminal("S");
        NonTerminal nonTerminalA = new NonTerminal("A");

        Terminal terminalA = new Terminal("a", "a");
        Terminal terminalB = new Terminal("b", "b");
        Terminal terminalC = new Terminal("c", "c");
        Terminal terminalD = new Terminal("d", "d");
        Terminal terminalEps = Terminal.EPSILON;

        Grammar grammar = new Grammar("S0", nonTerminalS);
        grammar.addTerminals(terminalA, terminalB, terminalC, terminalD, terminalEps);
        grammar.addNonTerminals(nonTerminalS, nonTerminalA);
        grammar.addProduction(nonTerminalS, nonTerminalA, terminalA);
        grammar.addProduction(nonTerminalS, terminalB);
        grammar.addProduction(nonTerminalA, nonTerminalA, terminalC);
        grammar.addProduction(nonTerminalA, nonTerminalS, terminalD);
        grammar.addProduction(nonTerminalA, terminalEps);

        return grammar;
    }
}
